{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACAD,EAAAE,OAAOC,KAAK,CAAEC,SAAS,IAEvB,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,kBAGpC,IAAIE,EAAa,GACbC,EAAa,KAEjBN,EAAKC,KAAKM,iBAAiB,SA4B3B,SAAwBC,GACtBH,EAAWG,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,SA5BvCX,EAAKC,KAAKM,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEI,iBACF,IAAIC,EAAW,EACXC,EAAeC,OAAOV,EAAWW,OAErCV,EAAaW,aAAY,KACvBJ,GAAY,EACRA,EAAWR,EAAWa,SAsB9B,SAAuBC,EAAUH,GAC/B,MAAMI,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEL,E,MAAUH,IAEpBS,EAAO,C,SAAEN,E,MAAUH,MAEpBA,MA7BHW,CAAcd,EAAUC,GACrBc,MAAK,EAACT,SAAEA,EAAQH,MAAEA,MACjBrB,EAAAE,OAAOgC,QAAQ,uBAAqBV,QAAiBH,MAAW,CAC5Dc,QAAO,SAGZC,OAAM,EAACZ,SAAEA,EAAQH,MAAEA,MAClBrB,EAAAE,OAAOmC,QAAQ,sBAAoBb,QAAeH,MAAW,CAC3Dc,QAAS,SAIfhB,GAAgBC,OAAOV,EAAW4B,SACjC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nNotify.init({ useIcon: false });\n\nconst refs = {\n  form: document.querySelector('.form'),\n  createBtn: document.querySelector('[type=submit]'),\n};\n\nlet inputsData = {};\nlet intervalId = null;\n\nrefs.form.addEventListener('input', getInputsValue);\nrefs.form.addEventListener('submit', makePromises);\n\nfunction makePromises(e) {\n  e.preventDefault();\n  let position = 0;\n  let promiseDelay = Number(inputsData.delay);\n\n  intervalId = setInterval(() => {\n    position += 1;\n    if (position > inputsData.amount) return;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      });\n\n    promiseDelay += Number(inputsData.step);\n  }, 0);\n}\n\nfunction getInputsValue(e) {\n  inputsData[e.target.name] = e.target.value;\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","Notify","init","useIcon","$47d4ff9957288465$var$refs","form","document","querySelector","createBtn","$47d4ff9957288465$var$inputsData","$47d4ff9957288465$var$intervalId","addEventListener","e","target","name","value","preventDefault","position1","promiseDelay","Number","delay","setInterval","amount","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","success","timeout","catch","failure","step"],"version":3,"file":"03-promises.277cb063.js.map"}